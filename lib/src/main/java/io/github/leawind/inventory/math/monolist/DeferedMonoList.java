package io.github.leawind.inventory.math.monolist;

import java.util.function.Function;

/**
 * A deferred implementation of the {@link MonoList} interface.
 *
 * <p>This class constructs a monotonic list using a provided function to calculate values on
 * demand.
 *
 * @see MonoList
 */
public class DeferedMonoList extends MonoList {
  private final int length;
  private final int sign;
  private final Function<Integer, Double> getter;

  /**
   * Constructs a new DeferedMonoList with the specified length and value generation function.
   *
   * <p>The monotonic direction is determined by comparing the first two values generated by the
   * function.
   *
   * @param length The number of elements in the list.
   * @param getter The function to compute the value at any index.
   */
  protected DeferedMonoList(int length, Function<Integer, Double> getter) {
    this.length = length;
    this.getter = getter;
    this.sign = findSign(length, getter);
  }

  @Override
  public double get(int i) {
    return getter.apply(i);
  }

  @Override
  public int sign() {
    return sign;
  }

  @Override
  public int length() {
    return length;
  }

  /**
   * Creates a linear monotonic list where each value corresponds to its index.
   *
   * @param length The number of elements.
   * @return A new DeferedMonoList with values increasing linearly.
   */
  public static DeferedMonoList linear(int length) {
    return new DeferedMonoList(length, i -> (double) i);
  }

  /**
   * Creates a monotonic list where values are calculated using the exponential function.
   *
   * @param length The number of elements.
   * @return A new DeferedMonoList with exponentially increasing values.
   */
  public static DeferedMonoList exp(int length) {
    return new DeferedMonoList(length, Math::exp);
  }

  /**
   * Creates a monotonic list where values are squares of their indices.
   *
   * @param length The number of elements.
   * @return A new DeferedMonoList with squared values.
   */
  public static DeferedMonoList squared(int length) {
    return new DeferedMonoList(length, i -> (double) (i * i));
  }

  /**
   * Creates a custom monotonic list with the specified length and value generator.
   *
   * @param length The number of elements.
   * @param getter The function to compute values by index.
   * @return A new DeferedMonoList.
   */
  public static DeferedMonoList of(int length, Function<Integer, Double> getter) {
    return new DeferedMonoList(length, getter);
  }

  public static DeferedMonoList of(double[] list) {
    return new DeferedMonoList(list.length, i -> list[i]);
  }
}
