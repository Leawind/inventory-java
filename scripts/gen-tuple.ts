/**
 * ```java
 * package io.github.leawind.inventory.tuple;
 *
 * public final class Tuple {
 *
 *   public record Tuple1<T1>(T1 v1) {}
 *
 *   public record Tuple2<T1, T2>(T1 v1, T2 v2) {}
 *
 *   public static <T1> Tuple1<T1> of(T1 v1) {
 *     return new Tuple1<>(v1);
 *   }
 *
 *   public static <T1, T2> Tuple2<T1, T2> of(T1 v1, T2 v2) {
 *     return new Tuple2<>(v1, v2);
 *   }
 * }
 * ```
 */

const PACKAGE = "io.github.leawind.inventory.tuple";
const JAVA_FILE =
	"../lib/src/main/java/io/github/leawind/inventory/tuple/Tuple.java";

const MAX = 32;

const nums = Array
	.from({ length: MAX + 1 }, (_, i) => i)
	.filter((i) => i >= 1);

const linesFinalClass = [
	`// generated by gen-tuple.ts`,
	``,
	`package ${PACKAGE};`,
	``,
	``,
	`public final class Tuple {`,

	`  private Tuple() {}`,

	...nums.map((i) =>
		`  public record Tuple${i}<${types(i)}>(${params(i)}){}`
	),

	...nums.map((i) =>
		[
			`  public static ` +
			`<${types(i)}> Tuple${i}<${types(i)}> of(${params(i)}) {`,
			`    return new Tuple${i}<>(${args(i)});`,
			`  }`,
		].join("\n")
	),
	`}`,
];

Deno.writeTextFileSync(JAVA_FILE, linesFinalClass.join("\n"));

function types(i: number) {
	return nums.slice(0, i)
		.map((j) => `T${j}`)
		.join(", ");
}

function params(i: number) {
	return nums.slice(0, i)
		.map((j) => `T${j} v${j}`)
		.join(", ");
}

function args(i: number) {
	return nums.slice(0, i)
		.map((j) => `v${j}`)
		.join(", ");
}
